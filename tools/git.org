#+TITLE: git

#+AUTHOR: EricSun
* 配置
1. git忽略file mode的配置
  #+BEGIN_SRC shell
  $ git config --add core.filemode false
  #+END_SRC

2. git本地忽略相关文件
   可以将文件或路径加入.git/info/exclude文件。该文件具有与任何.gitignore文件相同的配置格式。
   如果撤销了更改，则需要再编辑忽略模式之后运行如下命令
  #+BEGIN_SRC shell
  $ git update-index --assume-unchanged <file-list>
  #+END_SRC

3. 解决git status中文乱码
  #+BEGIN_SRC shell
  git config --global core.quotepath false
  #+END_SRC

* 常用命令
1. 显示git配置信息
  #+BEGIN_SRC shell
  $ git config --list
  #+END_SRC

2. 显示git用户名
  #+BEGIN_SRC shell
  $ git config user.name
  #+END_SRC

3. 显示git用户邮箱
  #+BEGIN_SRC shell
  $ git config user.email
  #+END_SRC

4. 全局配置用户名
  #+BEGIN_SRC shell
  $ git config --global user.name "your_name"
  #+END_SRC

5. 全局配置用户邮箱
  #+BEGIN_SRC shell
  $ git config --global user.email "your_email"
  #+END_SRC

6. 修改默认编辑器
  #+BEGIN_SRC shell
  $ git config --global core.editor [vim|emacs]
  #+END_SRC

* git patch
** diff/apply
此方案使用diff命令生成patch文件，然后使用apply命令应用patch到分支
#+BEGIN_SRC
# 生成补丁
git diff > commit.patch
# 检查补丁
git apply --check commit.patch
# 应用补丁
git apply commit.patch
#+END_SRC

+ git diff
  没有指定任何版本，默认就是对last commit和working copy之间作比较
+ git diff --cached
  同git diff，对已经add但未commit的修改生效
+ git diff commit_id
  对commit_id和working copy之间作比较。如果working space已经commit过了，这个命令等价于对commit_id和last commit作比较
+ git diff commit_id1 commit_id2
  对commit_id1和commit_id2之间作比较

** format-patch/am
此方案使用format-patch命令生成一系列patch文件，然后使用am命令批量应用patch。diff不会保留commit信息，而format-patch会完整保留每次提交的完整信息。
#+BEGIN_SRC
# 生成patch
git format-patch -1
# 检查patch
git apply --check 0001-made-some-change.patch
# 应用patch
git am 0001-made-some-change.patch
#+END_SRC

+ 当然没分支所有超前master的提交
  #+BEGIN_SRC
  git format-patch -M master
  #+END_SRC

+ 某次提交以后的所有patch
  #+BEGIN_SRC
  git format-patch commit_id
  #+END_SRC

+ 从根到指定提交的所有patch
  #+BEGIN_SRC
  git format-patch --root commit_id
  #+END_SRC

+ 某两次提交之间的所有patch
  #+BEGIN_SRC
  git format-patch commit_id1 commit_id2
  #+END_SRC

+ 某次提交（含）之前的几次提交
  #+BEGIN_SRC
  git format-patch -n commit_id

  git format-patch -1 commit_id

  git format-patch -2 commit_id
  #+END_SRC

* 事件
** 用本地已有的项目初始化git仓库
将本地已有的一个非git项目上传到新建的git仓库的方法有两种
*** 一、克隆+拷贝
把远程仓库拉到本地，然后再把自己本地的项目拷贝到仓库中去，然后push到远程仓库中去即可。
*此方法适用于本地项目不是一个git仓库的情况*
1. 克隆远程仓库
  #+BEGIN_SRC shell
  $ git clone git@github.com:xxx/xxx.git
  #+END_SRC
2. 复制自己项目的所有文件到刚克隆的仓库中
3. 将更新push到远程仓库中
  #+BEGIN_SRC shell
  $ git add .
  $ git commit -s
  $ git push -u origin master
  #+END_SRC
*** 二、强行合并两个仓库
如果本地项目已经被初始化为一个git项目，直接pull会报错。因此需要在pull的时候加上`--allow-unrelated-histories`才可以。
*此方法适用于本地项目已经是一个git仓库的情况*
1. 初始化本地git仓库
  #+BEGIN_SRC shell
  $ git init
  $ git add .
  $ git commit
  #+END_SRC
2. 将本地仓库与远程仓库关联起来
  #+BEGIN_SRC shell
  git remote add origin git@github.com/xxx/xxx.git
  #+END_SRC
3. pull远程仓库的内容，更新本地仓库。需要使用`--allow-unrelated-histories`忽略本地仓库和远程仓库的无关行，强行合并。
  #+BEGIN_SRC shell
  $ git pull origin master --allow-unrelated-histories
  #+END_SRC
4. 把本地仓库的内容push到远程仓库
  #+BEGIN_SRC shell
  $ git push -u origin master
  #+END_SRC

* 命令
#+CAPTION: git命令
#+NAME: fig
[[images/git.png]]
