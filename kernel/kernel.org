* 基础
字节顺序是指一个字中各个字节的顺序。

* 内存
** 内存地址
*** 逻辑地址/logical address
包含在机器语言指令中用来指定一个操作数或者一条指令的地址。每一个逻辑地址都有一个段(segment)和偏移量(offset or displacement)组成，偏移量指明了从段开始的地方到实际地址之间的距离。

*** 线性地址/linear address or 虚拟地址/virtual address
是一个32位无符号整数，可以用来表示高达4GB的地址空间

*** 物理地址/physical address
用于内存芯片级内存单元寻址。它们与从微处理器的地址引脚发送到内存总线上的电信号相对应。物理地址由32位或36位无符号整数表示。

内核中的内存都不分页。也就是说，每用掉一个字节，物理内存就减少一个字节。

* 中断
内核中有类似可能造成并发执行的原因
+ 中断——中断几乎可以在任何时刻异步发生，也就是可能随时打断当前正在执行的代码
+ 软中断和tasklet——内核能在任何时刻唤醒或调度软中断和tasklet，打断当前正在执行的代码
+ 内核抢占——因为内核具有抢占性，所以内核中的任务可能会被另一任务抢占
+ 睡眠及与用户空间的同步——在内核执行的进程可能会睡眠，这就会唤醒调度程序，从而导致调度一个新的用户进程执行
+ 对称多处理——两个或多个处理器可以同时执行代码

一个中断处理程序既可以抢占其他的中断处理程序，也可以抢占异常处理程序。相反，异常处理程序从不抢占中断处理程序。在内核态能触发的唯一异常就是缺页异常。但是，中断处理程序从不执行可以导致缺页（因此意味着进程切换）的操作。

在中断处理程序中能避免并发访问的安全代码称作中断安全码(interrupt-safe)，在对称多处理的机器中能避免并发访问的安全代码称为SMP安全代码(SMP-safe)，在内核抢占时能避免并发访问的安全代码称为抢占安全代码(preempt-safe)。

* 锁
** 自旋锁
由于下半部可以抢占进程上下文中的代码，所以当下半部和进程上下文共享数据时，必须对进程上下文中的共享数据进行保护，所以需要加锁的同时还要禁止下半部执行。同样，由于中断处理程序可以抢占下半部，所以如果中断处理程序和下半部共享数据，那么就必须在获取恰当的锁的同时还要禁止中断。
* 块I/O
块设备中最小的可寻址单元是扇区。扇区大小一般是2的整数倍，而最常见的是512字节。扇区的大小是设备的物理属性，扇区是所有块设备的基本单元——块设备无法对比它还小的单元进行寻址和操作，尽管许多块设备能够一次对多个扇区进行操作。

因为各种软件的用途不同，所以它们都会用到自己的最小逻辑可寻址单元——块。块是文件系统的一种抽象——只能基于块来访问文件系统。虽然物理磁盘寻址是按照扇区级进行的，但是内核执行的所以磁盘操作都是按照块进行的。由于扇区是设备的最小可寻址单元，所以块不能比扇区还小，只能数倍于扇区大小。另外，内核（对有扇区的硬件设备）还要求块大小是2的整数倍，而且不能超过一个页的长度。所以，对块大小的最终要求是，必须是扇区大小的2的整数倍，并且要小于页面大小。所以通常块大小是512字节、1KB或4KB。

