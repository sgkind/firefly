* 宏
1. #
#的作用是将后面的宏参数字符串化
2. ##
##的作用是把2个宏参数连接为1个参数
注：##不能连接字符串，有宏连接两个字符串的时候在字符串中间加一个空格即可

* C语言程序设计
*** 函数与程序结构
1. 对于某些中等规模的程序，最好只用一个头文件存放程序中各部分共享的对象。
2. 用static声明限定外部变量与函数，可以将其后声明的对象的作用于限定为被编译源文件的剩余部分。
3. 把函数声明为static类型，则函数名除了对该函数声明所在的文件可见外，其他文件无法访问。
4. static也可以用于声明内部变量。static类型的内部变量同自动变量一样，是某个特定函数的局部变量，只能在该函数中使用，但它与自动变量不同的是，不管其所在函数是否被调用，它一直存在。
5. 对于外部变量与静态变量来说，初始化表达式必须是常量表达式，且只初始化一次。
6. register声明告诉编译器，它所声明的变量在程序中使用频率较高。将register变量放在机器的寄存器中，这样可以使程序更小、执行速度更快。但编译器可以忽略此选项。
7. register声明只适用于自动变量以及函数的形式参数。
8. 如果文件名用引号引起来，则在源文件所在位置查找该文件；如果在该位置没有找到文件，或者如果文件名是用尖括号<与>括起来的，则将根据相应的规则查找该文件，这个规则同具体的实现有关。
9. 通常情况下，#define指令占一行，替换文本是#define指令行尾部的所有剩余部分内容，但也可以把一个较长的宏定义分成若干行，这时需要在待续的行末尾加上一个反斜杠符。
10. 宏替换只对记号进行，对括在引号中的字符串不起作用。
11. 可以通过#undef指令取消名字的宏定义，这样做可以保证后续的调用是函数调用，而不是宏调用。
12. 形式参数不能用带引号的字符串替换。但是，如果在替换文本中，参数名以#作为前缀则结果将被扩展为由实际参数替换该参数的带引号的字符串。
13. 预处理器运算符##为宏扩展提供了一种连接实际参数的手段。如果替换文本中的参数与##相邻，则该参数将被实际参数替换，##与前后的空白符将被删除，并对替换hour的结果重新扫描。例
#+BEGIN_SRC
#define paste(front, back) front ## back
#+END_SRC
宏调用paste(name, 1)的结果将建立记号name1
14. #if语句对其中的常量整形表达式（其中不能包含sizeof、类型转换运算符或enum常量）进行求值，若该表达式的值不等于0，则包含其后的各行，直到遇到#endif、#elif或#else语句为止（预处理器语句#elif类似于else if）。在#if语句中可以使用表达式defined（名字），该表达式的值遵循下列规则：当名字已经定义时，其值为1；否则，其值为0。

*** 数组
1. 地址运算符&不能作用于register类型的变量。
2. 一般来说，用指针编写的程序比用数组下标编写的程序执行速度快。
3. 在计算数组元素a[i]的值时，C语言实际上先将其转换为*(a+i)的形式，然后再进行求值。
4. 如果pa是个指针，那么，在表达式中也可以在它的后面加下标。
5. 需要记住，数组名和指针之间有一个不同之处，指针是一个变量，因此，在C语言中，语句pa=a和pa++都是合法的。但数组名不是变量，因此类似于a=pa和a++形式的语法是错误的。
6. 通常，对指针有意义的初始化值只能是0或者是表示地址的表达式，对后者来说，表达式所代表的地址必须是在此前已定义的具有适当类型的数据的地址。
7. 程序中经常用符号常量NULL代替常量0。符号常量NULL定义在标准头文件<stddef.h>中。
8. 指针的算术运算中可使用数组最后一个元素的下一个元素的地址。
9. 头文件<stddef.h>中定义的类型ptrdiff_t足以表示两个指针之间的带符号差值。size_t是由运算符sizeof返回的无符号整形。
10.字符串常量是一个字符串数组。
11.数组元素按行存储，因此，当按存储顺序访问数组时，最右边的数组下标（即列）变化得最快。
#+BEGIN_SRC
daytab[i][j]; /*[row][col] */
#+END_SRC
12.如果将二维数组作为参数传递给函数，那么在函数的参数声明中必须指明数组的列数。
13.在C语言中，指向函数的指针可以被赋值、存放在数组中、传递给函数以及作为函数的返回值等等。

*** 结构
1. 结构的合法操作只有几种：作为一个整体复制和赋值，通过&运算符取地址，访问其成员。其中，复制和赋值包括向函数传递参数以及从函数返回值。结构之间不可以进行比较。
2. 结构数组
```C
struct key {
	char *word;
	int count;
} keytab[NKEYS];
```
3. 联合只能用其第一个成员类型的值进行初始化。

*** 输入与输出
1. 符号常量EOF在头文件<stdio.h>中定义，其值一般为-1.
2. 在转换说明中，宽度或精度可以用星号*表示，这时，宽度或精度的值通过转换下一参数（必须为int类型）来计算。例如：为了从字符串s中打印最多max个字符，可以使用下列语句：
```C
printf("%.*s", max, s);
```
3. 标准头文件<stdarg.h>中包含一组宏定义，它们对如何遍历参数表进行了定义。该头文件的实现因不同的机器而不同，但提供的接口是一致的。va_list类型用于声明一个变量，该变量将依次引用各参数。宏va_start将ap初始化为指向第一个无名参数的指针。每次调用va_arg,该函数都将返回一个参数，并将ap指向下一个参数。必须在函数返回之前调用va_end，以完成一些必要的清理工作。
4. ANSI标准规定，ferror在发生错误时返回非0值，而fputs在发生错误时返回EOF。
5. 函数system(char* s)执行包含在字符串s中的命令，然后继续执行当前程序。
6. 函数malloc和函数calloc。

1. 标准库提供了一次读/写一个字符的函数,其中最简单的是getchar和putchar两个函数.每次调用时, getchar函数从文本流中读入下一个输入字符,并将其作为结果值返回.每次调用putchar函数时将打印一个字符.putchar与printf这两个函数可以交替调用,输出的次序与调用的次序一致.
2. 定义与声明的区别."定义"表示创建变量或分配存储单元,而"声明"指的是说明变量的性质,但并不分配存储单元.

* code snippet
1. 获取当前工作路径
#+BEGIN_SRC
#include <direct.h>
char buf[512]
getcwd(buf, sizeof(buf))
#+END_SRC